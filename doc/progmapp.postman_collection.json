{
	"info": {
		"_postman_id": "3bdf898c-a990-414c-bff2-1b20ab55234e",
		"name": "progmapp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "emailregistration",
			"item": [
				{
					"name": "ForPerformanceTest",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Complete registration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\":\"7cc56d2d-4c8b-4f0c-9d00-ea0696c5a55f\",\n    \"password\":\"nyilasypeter\",\n    \"birthDate\":\"1980.04.29\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/completeregistration",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"completeregistration"
							]
						}
					},
					"response": []
				},
				{
					"name": "send new reglink to user",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{progmappbe_host}}/user/newreglink/nyilasypeter",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"user",
								"newreglink",
								"nyilasypeter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aladár changes his data",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mézga megváltozott aladár\",\n    \"oldPassword\": \"mezgaaladar\",\n    \"password\": \"bubuka123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/me",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "e2eTest_modifies_data",
			"item": [
				{
					"name": "Get CSRF value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c7a84c5-3b72-41a9-9e63-644d644be214",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ca2d9d2-535b-4c5c-8865-a8e3ab84bd21",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3b0e2b2-7191-4d40-a74a-8b6d0d08aa43",
								"exec": [
									"let userName = pm.environment.get(\"adminusername\");",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.loginName).to.eql(userName);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{adminusername}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{adminuserpassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{progmappbe_host}}/login",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CSRF value after login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c7a84c5-3b72-41a9-9e63-644d644be214",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ae01e34d-63ce-4c00-bc8f-81e686829e34",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "My profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17bca225-5c7d-4457-a1c5-0bad174eb7b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "adc161f0-9ee1-48cd-adcb-ee7e2a266055",
								"exec": [
									"let adminUserName = pm.environment.get(\"adminusername\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Reponse id is ok\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(adminUserName);",
									"});",
									"pm.test(\"Reponse loginName is ok\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.loginName).to.eql(adminUserName);",
									"});",
									"pm.test(\"Reponse roles.lengt > 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.gt(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/me",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create question",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fff8bc8e-d5f8-4ff8-ab2e-d9a859ab1db1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									"pm.test(\"Body is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idOfCreatedEntity).to.eql(pm.environment.get('progmappbe_question_id'));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "524ad69f-2493-4a10-a6d2-c6f3f5f2d7a3",
								"exec": [
									"if (!pm.environment.has(\"question_create_count\")) {",
									"    console.log(\"Setting counter now\");",
									"    pm.environment.set(\"question_create_count\", 0);",
									" }",
									" ",
									"let currentCount = parseInt(pm.environment.get(\"question_create_count\")); ",
									"let numberOfLoops = 100;",
									"",
									"if (currentCount < numberOfLoops) {",
									"    pm.environment.set(\"progmappbe_question_id\", \"micimackokedvence_\" + currentCount);",
									"    postman.setNextRequest(\"Create question\");",
									"}",
									"else{",
									"    pm.environment.set(\"progmappbe_question_id\", \"micimackokedvence\");",
									"}",
									"",
									"// increment the counter and re-save the value as an environment variable",
									"currentCount++;",
									"pm.environment.set(\"question_create_count\", currentCount);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t \"id\":\"{{progmappbe_question_id}}\",\n\t\"text\": \"Melyik Micimackó két legkedvesebb étele?\",\n    \"explanationAfter\": \"Nem muszáj, hogy a két legkedevesebb különbözzön...\",\n    \"feedbackType\": \"trueFalseFeedback\",\n\t\"possibleAnswers\": [{\n\t\t\"textBefore\": \"Első legkedevesebb\",\n\t\t\"type\": \"dropdown\",\n\t\t\"possibleAnswerValues\": [{\n\t\t\t\"text\": \"kenyér\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"sör\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"méz\",\n\t\t\t\"isRightAnswer\": true\n\t\t}]\n\t}, {\n\t\t\"textBefore\": \"Második legkedevesebb\",\n\t\t\"type\": \"dropdown\",\n\t\t\"possibleAnswerValues\": [{\n\t\t\t\"text\": \"kenyér\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"sör\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"méz\",\n\t\t\t\"isRightAnswer\": true\n\t\t}]\n\t}]\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find question",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99049aea-63e4-449f-a0cc-3c46af280e4f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"id is micimackokedvence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"micimackokedvence\");",
									"});",
									"pm.test(\"possibleAnswers.length is 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.possibleAnswers.length).to.eql(2);",
									"});",
									"pm.test(\"possibleAnswers[0].possibleAnswerValues.length is 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.possibleAnswers[0].possibleAnswerValues.length).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "50b56807-aff0-4370-8d06-f40ac665c349",
								"exec": [
									"pm.environment.set(\"question_create_count\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJyTzBBQlhOeUFDWmpiMjB1Y0hKdloyMWhkR2xqTG5CeWIyZHRZWEJ3WW1VdVpXNTBhWFJwWlhNdVZYTmxjclNEY3dWY05iMGJBZ0FIVEFBUVlXTmpiM1Z1ZEU1dmJreHZZMnRsWkhRQUUweHFZWFpoTDJ4aGJtY3ZRbTl2YkdWaGJqdE1BQXRoWTNSMVlXeFVaWE4wYzNRQUQweHFZWFpoTDNWMGFXd3ZVMlYwTzB3QURHVnRZV2xzUVdSa2NtVnpjM1FBRWt4cVlYWmhMMnhoYm1jdlUzUnlhVzVuTzB3QUNXeHZaMmx1VG1GdFpYRUFmZ0FEVEFBRWJtRnRaWEVBZmdBRFRBQUljR0Z6YzNkdmNtUnhBSDRBQTB3QUJYSnZiR1Z6Y1FCK0FBSjRjZ0FzWTI5dExuQnliMmR0WVhScFl5NXdjbTluYldGd2NHSmxMbVZ1ZEdsMGFXVnpMa0poYzJWRmJuUnBkSG1BeHYybDAyYWNkd0lBQlV3QUNXTnlaV0YwWldSQmRIUUFHVXhxWVhaaEwzUnBiV1V2VEc5allXeEVZWFJsVkdsdFpUdE1BQWxqY21WaGRHVmtRbmx4QUg0QUEwd0FBbWxrY1FCK0FBTk1BQTVzWVhOMFRXOWthV1pwWldSQ2VYRUFmZ0FEVEFBSmRYQmtZWFJsWkVGMGNRQitBQVY0Y0hOeUFBMXFZWFpoTG5ScGJXVXVVMlZ5bFYyRXVoc2lTTElNQUFCNGNIY0tCUUFBQitJTERCUVgrWGh3ZEFBa016RXdNVE5tWWprdE5qTTRaaTAwTldabUxXSXdOMlF0TWpreU9UTmpaRGM1WVdFMWNIQnpjZ0FSYW1GMllTNXNZVzVuTGtKdmIyeGxZVzdOSUhLQTFaejY3Z0lBQVZvQUJYWmhiSFZsZUhBQmMzSUFMMjl5Wnk1b2FXSmxjbTVoZEdVdVkyOXNiR1ZqZEdsdmJpNXBiblJsY201aGJDNVFaWEp6YVhOMFpXNTBVMlYwaTBmdmVkVEprWDBDQUFGTUFBTnpaWFJ4QUg0QUFuaHlBRDV2Y21jdWFHbGlaWEp1WVhSbExtTnZiR3hsWTNScGIyNHVhVzUwWlhKdVlXd3VRV0p6ZEhKaFkzUlFaWEp6YVhOMFpXNTBRMjlzYkdWamRHbHZia0FzK0ExWTFWTHlBZ0FMV2dBYllXeHNiM2RNYjJGa1QzVjBjMmxrWlZSeVlXNXpZV04wYVc5dVNRQUtZMkZqYUdWa1UybDZaVm9BQldScGNuUjVXZ0FPWld4bGJXVnVkRkpsYlc5MlpXUmFBQXRwYm1sMGFXRnNhWHBsWkZvQURXbHpWR1Z0Y0ZObGMzTnBiMjVNQUFOclpYbDBBQlpNYW1GMllTOXBieTlUWlhKcFlXeHBlbUZpYkdVN1RBQUZiM2R1WlhKMEFCSk1hbUYyWVM5c1lXNW5MMDlpYW1WamREdE1BQVJ5YjJ4bGNRQitBQU5NQUJKelpYTnphVzl1Um1GamRHOXllVlYxYVdSeEFINEFBMHdBRG5OMGIzSmxaRk51WVhCemFHOTBjUUIrQUE1NGNBRC8vLy8vQUFBQUFIRUFmZ0FKY1FCK0FBWjBBREpqYjIwdWNISnZaMjFoZEdsakxuQnliMmR0WVhCd1ltVXVaVzUwYVhScFpYTXVWWE5sY2k1aFkzUjFZV3hVWlhOMGMzQndjSEIwQUFWaFpHMXBibkIwQUR3a01tRWtNVEFrUkdSQlVEbE1Za05STVRsTU0xUnNjSEYzTWpodFpWWXhMMUZuVjNCWFJ6WlZkV04zVVdkS1pXOU1XRFpuUzFwT1lrd3Zlakp6Y1FCK0FBd0EvLy8vL3dBQUFRQjBBQ1F6TVRBeE0yWmlPUzAyTXpobUxUUTFabVl0WWpBM1pDMHlPVEk1TTJOa056bGhZVFZ4QUg0QUJuUUFMR052YlM1d2NtOW5iV0YwYVdNdWNISnZaMjFoY0hCaVpTNWxiblJwZEdsbGN5NVZjMlZ5TG5KdmJHVnpjSE55QUJGcVlYWmhMblYwYVd3dVNHRnphRTFoY0FVSDJzSERGbURSQXdBQ1JnQUtiRzloWkVaaFkzUnZja2tBQ1hSb2NtVnphRzlzWkhod1AwQUFBQUFBQUFGM0NBQUFBQUlBQUFBQmMzSUFKbU52YlM1d2NtOW5iV0YwYVdNdWNISnZaMjFoY0hCaVpTNWxiblJwZEdsbGN5NVNiMnhscnBoMm9yeFhLck1DQUFOTUFBUnVZVzFsY1FCK0FBTk1BQXB3Y21sMmFXeHBaMlZ6Y1FCK0FBSk1BQVYxYzJWeWMzRUFmZ0FDZUhFQWZnQUVjM0VBZmdBSGR3b0ZBQUFINGdzTUZCZjVlSEIwQUNSaE9UZGhOR1l3Tmkwd056RmxMVFJrTWpJdE9UaGhZaTAyWVRRd01qTXdNV0ZtTVRod2NIUUFCM1JsWVdOb1pYSnpjUUIrQUF3QS8vLy8vd0FBQVFCMEFDUmhPVGRoTkdZd05pMHdOekZsTFRSa01qSXRPVGhoWWkwMllUUXdNak13TVdGbU1UaHhBSDRBR25RQU1XTnZiUzV3Y205bmJXRjBhV011Y0hKdloyMWhjSEJpWlM1bGJuUnBkR2xsY3k1U2IyeGxMbkJ5YVhacGJHbG5aWE53YzNFQWZnQVhQMEFBQUFBQUFBTjNDQUFBQUFRQUFBQURjM0lBSzJOdmJTNXdjbTluYldGMGFXTXVjSEp2WjIxaGNIQmlaUzVsYm5ScGRHbGxjeTVRY21sMmFXeHBaMlZ0Uk9LQ05iczVvZ0lBQWt3QUJHNWhiV1Z4QUg0QUEwd0FCWEp2YkdWemNRQitBQUo0Y1FCK0FBUnpjUUIrQUFkM0NnVUFBQWZpQ3d3VUYvbDRjSFFBSkRnME5XRXlNV1ZoTFdNNU56Z3ROR0l5TVMxaFl6UmpMVGd6WldNeE5qWmpaV0ppWTNCd2RBQU1jbVZoWkZGMVpYTjBhVzl1YzNFQWZnQU1BUC8vLy84QUFBQUFjUUIrQUNWeEFINEFJM1FBTVdOdmJTNXdjbTluYldGMGFXTXVjSEp2WjIxaGNIQmlaUzVsYm5ScGRHbGxjeTVRY21sMmFXeHBaMlV1Y205c1pYTndjSEJ4QUg0QUkzTnhBSDRBSW5OeEFINEFCM2NLQlFBQUIrSUxEQlFYK25od2RBQWtZbUptWlRFd04yTXRPRGhpWXkwME9UY3hMV0psWW1VdFlUa3dZamd4TldaaVpUUXhjSEIwQUE1amNtVmhkR1ZSZFdWemRHbHZibk54QUg0QURBRC8vLy8vQUFBQUFIRUFmZ0FyY1FCK0FDbHhBSDRBS0hCd2NIRUFmZ0FwYzNFQWZnQWljM0VBZmdBSGR3b0ZBQUFINGdzTUZCZjVlSEIwQUNSbE1EWTROREJtT0MwM09XWXpMVFF5T1RjdE9URXpZaTB5Wmpjd016TTJNRFJqWVRsd2NIUUFDbU55WldGMFpWUmxjM1J6Y1FCK0FBd0EvLy8vL3dBQUFBQnhBSDRBTUhFQWZnQXVjUUIrQUNod2NIQnhBSDRBTG5oemNnQVJhbUYyWVM1MWRHbHNMa2hoYzJoVFpYUzZSSVdWbHJpM05BTUFBSGh3ZHd3QUFBQVFQMEFBQUFBQUFBTnhBSDRBSTNFQWZnQXBjUUIrQUM1NGMzRUFmZ0FNQVAvLy8vOEFBQUFBY1FCK0FCeHhBSDRBR25RQUxHTnZiUzV3Y205bmJXRjBhV011Y0hKdloyMWhjSEJpWlM1bGJuUnBkR2xsY3k1U2IyeGxMblZ6WlhKemNIQndjUUIrQUJwNGMzRUFmZ0F6ZHd3QUFBQVFQMEFBQUFBQUFBRnhBSDRBR25nPSIsImV4cCI6MTU0MjIxNjIxMH0.I9KYH5uswSwoj20RQiiY3_nCJ3xqgGXwIVJXeil687gUkv2uerY1FsMyfUbD5_3lGZqyXkRIVTLJ5KTKQMnFWw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{progmappbe_host}}/question/micimackokedvence",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question",
								"micimackokedvence"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c6a99e6-96e0-42b5-bc38-c0528013f9ef",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"return array.length  > 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.gt(2);",
									"});",
									"pm.test(\"First question's text is 'Melyik Micimackó két legkedvesebb étele?'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].text).to.eql(\"Melyik Micimackó két legkedvesebb étele?\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4638deaf-4027-4701-9610-e001783a372a",
								"exec": [
									"pm.environment.set(\"question_create_count\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJyTzBBQlhOeUFDWmpiMjB1Y0hKdloyMWhkR2xqTG5CeWIyZHRZWEJ3WW1VdVpXNTBhWFJwWlhNdVZYTmxjclNEY3dWY05iMGJBZ0FIVEFBUVlXTmpiM1Z1ZEU1dmJreHZZMnRsWkhRQUUweHFZWFpoTDJ4aGJtY3ZRbTl2YkdWaGJqdE1BQXRoWTNSMVlXeFVaWE4wYzNRQUQweHFZWFpoTDNWMGFXd3ZVMlYwTzB3QURHVnRZV2xzUVdSa2NtVnpjM1FBRWt4cVlYWmhMMnhoYm1jdlUzUnlhVzVuTzB3QUNXeHZaMmx1VG1GdFpYRUFmZ0FEVEFBRWJtRnRaWEVBZmdBRFRBQUljR0Z6YzNkdmNtUnhBSDRBQTB3QUJYSnZiR1Z6Y1FCK0FBSjRjZ0FzWTI5dExuQnliMmR0WVhScFl5NXdjbTluYldGd2NHSmxMbVZ1ZEdsMGFXVnpMa0poYzJWRmJuUnBkSG1BeHYybDAyYWNkd0lBQlV3QUNXTnlaV0YwWldSQmRIUUFHVXhxWVhaaEwzUnBiV1V2VEc5allXeEVZWFJsVkdsdFpUdE1BQWxqY21WaGRHVmtRbmx4QUg0QUEwd0FBbWxrY1FCK0FBTk1BQTVzWVhOMFRXOWthV1pwWldSQ2VYRUFmZ0FEVEFBSmRYQmtZWFJsWkVGMGNRQitBQVY0Y0hOeUFBMXFZWFpoTG5ScGJXVXVVMlZ5bFYyRXVoc2lTTElNQUFCNGNIY0tCUUFBQitJTERCUVgrWGh3ZEFBa016RXdNVE5tWWprdE5qTTRaaTAwTldabUxXSXdOMlF0TWpreU9UTmpaRGM1WVdFMWNIQnpjZ0FSYW1GMllTNXNZVzVuTGtKdmIyeGxZVzdOSUhLQTFaejY3Z0lBQVZvQUJYWmhiSFZsZUhBQmMzSUFMMjl5Wnk1b2FXSmxjbTVoZEdVdVkyOXNiR1ZqZEdsdmJpNXBiblJsY201aGJDNVFaWEp6YVhOMFpXNTBVMlYwaTBmdmVkVEprWDBDQUFGTUFBTnpaWFJ4QUg0QUFuaHlBRDV2Y21jdWFHbGlaWEp1WVhSbExtTnZiR3hsWTNScGIyNHVhVzUwWlhKdVlXd3VRV0p6ZEhKaFkzUlFaWEp6YVhOMFpXNTBRMjlzYkdWamRHbHZia0FzK0ExWTFWTHlBZ0FMV2dBYllXeHNiM2RNYjJGa1QzVjBjMmxrWlZSeVlXNXpZV04wYVc5dVNRQUtZMkZqYUdWa1UybDZaVm9BQldScGNuUjVXZ0FPWld4bGJXVnVkRkpsYlc5MlpXUmFBQXRwYm1sMGFXRnNhWHBsWkZvQURXbHpWR1Z0Y0ZObGMzTnBiMjVNQUFOclpYbDBBQlpNYW1GMllTOXBieTlUWlhKcFlXeHBlbUZpYkdVN1RBQUZiM2R1WlhKMEFCSk1hbUYyWVM5c1lXNW5MMDlpYW1WamREdE1BQVJ5YjJ4bGNRQitBQU5NQUJKelpYTnphVzl1Um1GamRHOXllVlYxYVdSeEFINEFBMHdBRG5OMGIzSmxaRk51WVhCemFHOTBjUUIrQUE1NGNBRC8vLy8vQUFBQUFIRUFmZ0FKY1FCK0FBWjBBREpqYjIwdWNISnZaMjFoZEdsakxuQnliMmR0WVhCd1ltVXVaVzUwYVhScFpYTXVWWE5sY2k1aFkzUjFZV3hVWlhOMGMzQndjSEIwQUFWaFpHMXBibkIwQUR3a01tRWtNVEFrUkdSQlVEbE1Za05STVRsTU0xUnNjSEYzTWpodFpWWXhMMUZuVjNCWFJ6WlZkV04zVVdkS1pXOU1XRFpuUzFwT1lrd3Zlakp6Y1FCK0FBd0EvLy8vL3dBQUFRQjBBQ1F6TVRBeE0yWmlPUzAyTXpobUxUUTFabVl0WWpBM1pDMHlPVEk1TTJOa056bGhZVFZ4QUg0QUJuUUFMR052YlM1d2NtOW5iV0YwYVdNdWNISnZaMjFoY0hCaVpTNWxiblJwZEdsbGN5NVZjMlZ5TG5KdmJHVnpjSE55QUJGcVlYWmhMblYwYVd3dVNHRnphRTFoY0FVSDJzSERGbURSQXdBQ1JnQUtiRzloWkVaaFkzUnZja2tBQ1hSb2NtVnphRzlzWkhod1AwQUFBQUFBQUFGM0NBQUFBQUlBQUFBQmMzSUFKbU52YlM1d2NtOW5iV0YwYVdNdWNISnZaMjFoY0hCaVpTNWxiblJwZEdsbGN5NVNiMnhscnBoMm9yeFhLck1DQUFOTUFBUnVZVzFsY1FCK0FBTk1BQXB3Y21sMmFXeHBaMlZ6Y1FCK0FBSk1BQVYxYzJWeWMzRUFmZ0FDZUhFQWZnQUVjM0VBZmdBSGR3b0ZBQUFINGdzTUZCZjVlSEIwQUNSaE9UZGhOR1l3Tmkwd056RmxMVFJrTWpJdE9UaGhZaTAyWVRRd01qTXdNV0ZtTVRod2NIUUFCM1JsWVdOb1pYSnpjUUIrQUF3QS8vLy8vd0FBQVFCMEFDUmhPVGRoTkdZd05pMHdOekZsTFRSa01qSXRPVGhoWWkwMllUUXdNak13TVdGbU1UaHhBSDRBR25RQU1XTnZiUzV3Y205bmJXRjBhV011Y0hKdloyMWhjSEJpWlM1bGJuUnBkR2xsY3k1U2IyeGxMbkJ5YVhacGJHbG5aWE53YzNFQWZnQVhQMEFBQUFBQUFBTjNDQUFBQUFRQUFBQURjM0lBSzJOdmJTNXdjbTluYldGMGFXTXVjSEp2WjIxaGNIQmlaUzVsYm5ScGRHbGxjeTVRY21sMmFXeHBaMlZ0Uk9LQ05iczVvZ0lBQWt3QUJHNWhiV1Z4QUg0QUEwd0FCWEp2YkdWemNRQitBQUo0Y1FCK0FBUnpjUUIrQUFkM0NnVUFBQWZpQ3d3VUYvbDRjSFFBSkRnME5XRXlNV1ZoTFdNNU56Z3ROR0l5TVMxaFl6UmpMVGd6WldNeE5qWmpaV0ppWTNCd2RBQU1jbVZoWkZGMVpYTjBhVzl1YzNFQWZnQU1BUC8vLy84QUFBQUFjUUIrQUNWeEFINEFJM1FBTVdOdmJTNXdjbTluYldGMGFXTXVjSEp2WjIxaGNIQmlaUzVsYm5ScGRHbGxjeTVRY21sMmFXeHBaMlV1Y205c1pYTndjSEJ4QUg0QUkzTnhBSDRBSW5OeEFINEFCM2NLQlFBQUIrSUxEQlFYK25od2RBQWtZbUptWlRFd04yTXRPRGhpWXkwME9UY3hMV0psWW1VdFlUa3dZamd4TldaaVpUUXhjSEIwQUE1amNtVmhkR1ZSZFdWemRHbHZibk54QUg0QURBRC8vLy8vQUFBQUFIRUFmZ0FyY1FCK0FDbHhBSDRBS0hCd2NIRUFmZ0FwYzNFQWZnQWljM0VBZmdBSGR3b0ZBQUFINGdzTUZCZjVlSEIwQUNSbE1EWTROREJtT0MwM09XWXpMVFF5T1RjdE9URXpZaTB5Wmpjd016TTJNRFJqWVRsd2NIUUFDbU55WldGMFpWUmxjM1J6Y1FCK0FBd0EvLy8vL3dBQUFBQnhBSDRBTUhFQWZnQXVjUUIrQUNod2NIQnhBSDRBTG5oemNnQVJhbUYyWVM1MWRHbHNMa2hoYzJoVFpYUzZSSVdWbHJpM05BTUFBSGh3ZHd3QUFBQVFQMEFBQUFBQUFBTnhBSDRBSTNFQWZnQXBjUUIrQUM1NGMzRUFmZ0FNQVAvLy8vOEFBQUFBY1FCK0FCeHhBSDRBR25RQUxHTnZiUzV3Y205bmJXRjBhV011Y0hKdloyMWhjSEJpWlM1bGJuUnBkR2xsY3k1U2IyeGxMblZ6WlhKemNIQndjUUIrQUJwNGMzRUFmZ0F6ZHd3QUFBQVFQMEFBQUFBQUFBRnhBSDRBR25nPSIsImV4cCI6MTU0MjIxNjIxMH0.I9KYH5uswSwoj20RQiiY3_nCJ3xqgGXwIVJXeil687gUkv2uerY1FsMyfUbD5_3lGZqyXkRIVTLJ5KTKQMnFWw",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"questionText\":\"icim\",\n    \"uploader\": \"{{adminusername}}\",\n    \"notInEternalQuiz\": null,\n    \"uploadTimeFrom\": \"2010.09.01 08:00\",\n    \"uploadTimeTo\": \"2030.09.01 18:00\"\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/question/search",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Copy question",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ddcc745-e5d5-4df7-9f29-b92ae5505880",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{progmappbe_host}}/questioncopy/micimackokedvence",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"questioncopy",
								"micimackokedvence"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5c87089-0eff-4af2-9846-9640719d7bc0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"progmatic2020-ősz\",\n    \"year\": 2020,\n    \"semester\": \"autumn\",\n    \"isActive\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/class",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"class"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seach class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f944d0bd-2261-430f-90de-5d075896f982",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search class return class with valid id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql('progmatic2020-ősz');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{progmappbe_host}}/class?active=true&year=2020&id=progmatic2020-ősz&semester=autumn",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"class"
							],
							"query": [
								{
									"key": "active",
									"value": "true"
								},
								{
									"key": "year",
									"value": "2020"
								},
								{
									"key": "id",
									"value": "progmatic2020-ősz"
								},
								{
									"key": "semester",
									"value": "autumn"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create student (Mézga Aladár)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "197e2103-cce9-4188-83d1-8d101377b578",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mézga Aladár\",\n    \"loginName\": \"mezgaaladar\",\n    \"emailAddress\": \"mezgaaladar@gmail.com\",\n    \"password\": \"mezgaaladar\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/student",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create student (Mézga Kriszta)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b83b107e-26cf-4355-be1d-c88fbddfdf8e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mézga Kriszta\",\n    \"loginName\": \"mezgakriszta\",\n    \"emailAddress\": \"mezgakriszta@gmail.com\",\n    \"password\": \"mezgakriszta\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/student",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add student to class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75d1c4cc-ad60-41e0-8e03-fa5a4b5298ba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"idList\": [\n        \"mezgaaladar\",\n        \"mezgakriszta\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/class/progmatic2020-ősz/students",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"class",
								"progmatic2020-ősz",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create superuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4eec9da-21fe-41db-8245-ff5dcbdd95f1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"superman\",\n    \"loginName\": \"superman\",\n    \"emailAddress\": \"superman@progmatic.com\",\n    \"password\": \"superman\",\n    \"roles\":[\n        {\n            \"name\": \"teacher\"\n        },\n        {\n            \"name\": \"office\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/user",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create student (Nyilasy Péter) with mail registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02557534-8f4e-4673-b441-04be49516bb0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Nyilasy Péter\",\n    \"loginName\": \"nyilasypeter\",\n    \"emailAddress\": \"nyilasypeter@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/student",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8af67b2-162a-43ab-9320-6e76618c0dcd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"result length > 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.gt(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{progmappbe_host}}/user?name=&hasUnfinishedRegistration=&student=",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "hasUnfinishedRegistration",
									"value": ""
								},
								{
									"key": "student",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create eternal quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2e7338d-472e-48fb-ac8f-f1ac042272b8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"Örökkvíz_1\",\n    \"questionIds\": [\n        \"micimackokedvence\",\n        \"micimackokedvence_0\",\n        \"micimackokedvence_1\",\n        \"micimackokedvence_2\",\n        \"micimackokedvence_3\",\n        \"micimackokedvence_4\",\n        \"micimackokedvence_5\",\n        \"micimackokedvence_6\",\n        \"micimackokedvence_7\",\n        \"micimackokedvence_8\",\n        \"micimackokedvence_9\",\n        \"micimackokedvence_10\",\n        \"micimackokedvence_11\",\n        \"micimackokedvence_12\",\n        \"micimackokedvence_13\",\n        \"micimackokedvence_14\",\n        \"micimackokedvence_15\",\n        \"micimackokedvence_16\",\n        \"micimackokedvence_17\",\n        \"micimackokedvence_18\",\n        \"micimackokedvence_19\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create another eternal quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12b31606-b0fb-4734-b4dc-0191241f5bad",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"Örökkvíz_2\",\n    \"questionIds\": [\n        \"micimackokedvence_21\",\n        \"micimackokedvence_22\",\n        \"micimackokedvence_23\",\n        \"micimackokedvence_24\",\n        \"micimackokedvence_25\",\n        \"micimackokedvence_26\",\n        \"micimackokedvence_27\",\n        \"micimackokedvence_28\",\n        \"micimackokedvence_29\",\n        \"micimackokedvence_30\",\n        \"micimackokedvence_31\",\n        \"micimackokedvence_32\",\n        \"micimackokedvence_33\",\n        \"micimackokedvence_34\",\n        \"micimackokedvence_35\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign question to Eternail Quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9c1b663-7507-4828-a6f9-1ba2dbd71713",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"eternalQuizId\": \"Örökkvíz_1\",\n   \"questionIds\":[\"micimackokedvence_20\"] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/quiz/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"quiz",
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign class to Eternal Quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5038e43-eb5b-4ff2-8bb7-74215ab28563",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"eternalQuizId\": \"Örökkvíz_1\",\n   \"schoolClassId\": \"progmatic2020-ősz\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/quiz/class",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"quiz",
								"class"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign class to another Eternal Quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b14d9f01-91ea-4ae2-8699-5fa8460dda8c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"eternalQuizId\": \"Örökkvíz_2\",\n   \"schoolClassId\": \"progmatic2020-ősz\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/quiz/class",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"quiz",
								"class"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search eternal quizes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "460ac5de-2a98-4aab-80b5-92f106d94219",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as Aladár",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddf6ef60-2a0e-422f-98f0-d72581cf1f3a",
								"exec": [
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.loginName).to.eql(\"mezgaaladar\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "mezgaaladar",
									"type": "text"
								},
								{
									"key": "password",
									"value": "mezgaaladar",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{progmappbe_host}}/login",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CSRF value after login Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87476440-b7c2-4349-99dd-3490e5cf3f2b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ad79c695-a113-45b3-9d65-34210be3ee43",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get next eternal quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95c64ebf-39e7-4436-b1fb-5fafba35cf23",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"id is not null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).not.equal(null);",
									"});",
									"",
									"pm.test(\"possibleAnswers is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.possibleAnswers.length).to.be.above(0);",
									"});",
									"",
									"pm.variables.set(\"questionToAnswer\", JSON.stringify(pm.response.json()));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "quizanswer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b6b70c7-3e03-4286-8997-ff0f975821da",
								"exec": [
									"//let question = JSON.parse(pm.variables.get('questionToAnswer')).id;",
									"//pm.variables.set(\"questionId\",question.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b4f3b3c-3328-4254-a46f-ceab98d69d2c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"questionId\": \"micimackokedvence_0\",\n    \"answers\": [\n        {\n            \"id\": \"8aaa91cd-bb33-48c9-a60d-a4d10c43b36e\",\n            \"selectedAnswerIds\": [\n                \"9b5ce09a-b642-4674-b380-77441513832a\"\n            ]\n        },\n        {\n            \"id\": \"adf8ea72-e384-4f05-bda8-837bd7f13360\",\n            \"selectedAnswerIds\": [\n                \"a5fa3a78-f5c4-4fbe-8cb6-eeedcc448ee2\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/answer",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"answer"
							]
						},
						"description": "Modify it according to Get next eternal quiz's result."
					},
					"response": []
				},
				{
					"name": "Aladár gets his own statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f73b8404-2d0b-4de4-bae4-2c0007868cd5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"userId is not mezgaaladar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.equal(\"mezgaaladar\");",
									"});",
									"",
									"pm.test(\"nrOfAllQuestions is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nrOfAllQuestions).to.be.above(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/me/statistics",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"me",
								"statistics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e63fd58e-24fd-4d14-8559-d89c702049df",
								"exec": [
									"let userName = pm.environment.get(\"adminusername\");",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.loginName).to.eql(userName);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{adminusername}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{adminuserpassword}}",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{progmappbe_host}}/login",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CSRF value after login Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5ccb08f4-9ea1-4034-a3ae-dedd3da2fc82",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e6d1434-a1ab-47ae-8773-2404b3c1ee65",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin gets students' statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42949cf5-58c3-48d3-b627-7e404172cba6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"successFullResult is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.equal(true);",
									"});",
									"pm.test(\"studentStatistics length == 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.studentStatistics.length).to.equal(2);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/statistics/progmatic2020-ősz",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"statistics",
								"progmatic2020-ősz"
							]
						}
					},
					"response": []
				}
			],
			"description": "The requests here are meant to serve as an end to end test.\nThis test will create questions, students, etc. so do not run these requests on a production system.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "upload-download-image",
			"item": [
				{
					"name": "Upload image to PossibleAnswer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "907cfb35-fc22-4c32-bf27-815c95c753a7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"successFullResult is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ae09f4bb-6ca1-47ff-b946-27322ea70371",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/peti/kepek/Icons-Protection.png"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/question/possibleanswer/c742129b-55c8-485f-ab5c-915b4d36bd3f/imagefile",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question",
								"possibleanswer",
								"c742129b-55c8-485f-ab5c-915b4d36bd3f",
								"imagefile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download image of question Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f55f772-424f-4e1a-9f60-04a4ecbc5863",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is image/png\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('image/png');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/question/possibleanswer/c742129b-55c8-485f-ab5c-915b4d36bd3f/imagefile",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question",
								"possibleanswer",
								"c742129b-55c8-485f-ab5c-915b4d36bd3f",
								"imagefile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload image to question",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "838d9e85-1854-44ba-a00a-b0d7788d4e2f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"successFullResult is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8d03799f-f44b-46aa-b539-fa142cb83bb4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/peti/kepek/Icons-Protection.png"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/question/micimackokedvence/imagefile",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question",
								"micimackokedvence",
								"imagefile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download image of question",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1aaae94-3ef3-4a03-9eb4-ab2810d5d657",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is image/png\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('image/png');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/question/micimackokedvence/imagefile",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question",
								"micimackokedvence",
								"imagefile"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "cors",
			"item": [
				{
					"name": "csrf with cors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a276cec3-6b61-4886-85ff-2fd55dc277c5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Access-Control-Allow-Origin is http://localhost:4200\", function () {",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.eql('http://localhost:4200');",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "http://localhost:4200",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with CORS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a93fc0a6-6c46-4f8b-9c4c-bca1b47d02d6",
								"exec": [
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"admin\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Access-Control-Allow-Origin is http://localhost:4200\", function () {",
									"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.eql('http://localhost:4200');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							},
							{
								"key": "Origin",
								"value": "http://localhost:4200"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{progmappbe_host}}/login",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "other",
			"item": [
				{
					"name": "Modify question",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40a0967f-672b-46e9-8816-7c57bdae8cdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2d24fdfd-e812-4d53-818d-5fa042f00bb9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									"pm.test(\"Body is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idOfCreatedEntity).to.eql(pm.environment.get('progmappbe_question_id'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"micimackokedvence\",\n    \"createdAt\": null,\n    \"updatedAt\": \"2020-09-15T11:50:38\",\n    \"createdBy\": null,\n    \"lastModifiedBy\": \"admin\",\n    \"text\": \"Melyik Micimackó két legeslegkedvesebb csemegéje?\",\n    \"adminDescription\": null,\n    \"explanationAfter\": \"Nem muszáj, hogy a két legkedevesebb különbözzön...\",\n    \"answerTimeInSec\": null,\n    \"evaluationAlogrithm\": null,\n    \"feedbackType\": \"trueFalseFeedback\",\n    \"possibleAnswers\": [\n        {\n            \"id\": \"042418e9-457c-4801-9737-a67ec7e90f06\",\n            \"createdAt\": \"2020-09-04T07:50:23\",\n            \"updatedAt\": null,\n            \"createdBy\": \"admin\",\n            \"lastModifiedBy\": null,\n            \"textBefore\": \"Második legkedevesebb\",\n            \"textAfter\": null,\n            \"type\": \"dropdown\",\n            \"possibleAnswerValues\": [\n                {\n                    \"id\": \"931d79b9-f2c6-473a-b80e-9803cf9790bc\",\n                    \"createdAt\": \"2020-09-04T07:50:23\",\n                    \"updatedAt\": null,\n                    \"createdBy\": \"admin\",\n                    \"lastModifiedBy\": null,\n                    \"text\": \"méz\",\n                    \"isRightAnswer\": true\n                },\n                {\n                    \"id\": \"7bf53faa-98c1-495c-9a58-22b2f5801ce2\",\n                    \"createdAt\": \"2020-09-04T07:50:23\",\n                    \"updatedAt\": null,\n                    \"createdBy\": \"admin\",\n                    \"lastModifiedBy\": null,\n                    \"text\": \"zsömle\",\n                    \"isRightAnswer\": false\n                },\n                {\n                    \"id\": \"ff604a19-4c2d-4118-91c2-e0a2c34168e8\",\n                    \"createdAt\": \"2020-09-04T07:50:23\",\n                    \"updatedAt\": null,\n                    \"createdBy\": \"admin\",\n                    \"lastModifiedBy\": null,\n                    \"text\": \"sör\",\n                    \"isRightAnswer\": false\n                }\n            ]\n        },\n        {\n            \"id\": \"d5a0a58c-8f4c-4519-a013-8ab58f1dfdd8\",\n            \"createdAt\": \"2020-09-04T07:50:23\",\n            \"updatedAt\": null,\n            \"createdBy\": \"admin\",\n            \"lastModifiedBy\": null,\n            \"textBefore\": \"Első legkedevesebb\",\n            \"textAfter\": null,\n            \"type\": \"dropdown\",\n            \"possibleAnswerValues\": [\n                {\n                    \"id\": \"ebbc6035-b056-4faf-8bdd-1b5a59228ca6\",\n                    \"createdAt\": \"2020-09-04T07:50:23\",\n                    \"updatedAt\": null,\n                    \"createdBy\": \"admin\",\n                    \"lastModifiedBy\": null,\n                    \"text\": \"méz\",\n                    \"isRightAnswer\": true\n                },\n                {\n                    \"id\": \"204ef65d-4930-4cd0-bd29-9b49b21f8fa7\",\n                    \"createdAt\": \"2020-09-04T07:50:23\",\n                    \"updatedAt\": null,\n                    \"createdBy\": \"admin\",\n                    \"lastModifiedBy\": null,\n                    \"text\": \"kenyér\",\n                    \"isRightAnswer\": false\n                },\n                {\n                    \"id\": \"75441bad-6823-4be8-b8d8-853241ffbd2d\",\n                    \"createdAt\": \"2020-09-04T07:50:23\",\n                    \"updatedAt\": null,\n                    \"createdBy\": \"admin\",\n                    \"lastModifiedBy\": null,\n                    \"text\": \"sör\",\n                    \"isRightAnswer\": false\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify mail template",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ac972697-293d-48ce-ae28-f997abe46aba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50b84500-b920-423a-bbea-f54680023340",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n        \"id\": \"MAIL_TEMPLATE_STUDENT_REGISTRATION\",\n        \"body\": \"Kedves [(${recipient.name})]!  \\n\\n A https://progmapp.herokuapp.com/registration linken, az alábbi tokennel: [(${registrationLink})] tudsz regisztrálni a Progmatic-ba.\",\n        \"subject\": \"progmatic regisztráció\",\n        \"cc\": null,\n        \"html\": false\n    }"
						},
						"url": {
							"raw": "{{progmappbe_host}}/mailtemplate",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"mailtemplate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find mail templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9421d0c5-ad55-4918-8c60-9d59e2c6e262",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"result length > 0\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.gt(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{progmappbe_host}}/mailtemplate",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"mailtemplate"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "forPerformanceTest",
			"item": [
				{
					"name": "Create student",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6154fec5-b713-402d-96da-26c66ff32a9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{studentname}}\",\n    \"loginName\": \"{{studentname}}\",\n    \"emailAddress\": \"{{studentname}}@progmaticmail.com\",\n    \"password\": \"{{studentname}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/student",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add student to class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc6d67f6-50ad-4fc0-98ff-51e81aa5e14b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"idList\": [\n        \"{{studentname}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/class/progmatic2020-ősz/students",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"class",
								"progmatic2020-ősz",
								"students"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "create_test_data",
			"item": [
				{
					"name": "Get CSRF value Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9303e885-262f-4e53-8474-6bbd7403cf1a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "46ff1e5b-30cc-48e8-8c10-7d55de14cb2c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccae5601-5ad3-4b4b-8f4f-b93980d52653",
								"exec": [
									"let userName = pm.environment.get(\"adminusername\");",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.loginName).to.eql(userName);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{adminusername}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{adminuserpassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{progmappbe_host}}/login",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CSRF value after login Copy 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ee158219-c3a2-4139-a968-84917e0de9e7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d3f4ce7-c899-4f23-8dd5-f530aebf6c99",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create question Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edba5ea5-a464-4394-b6dd-7ec8db8c8e5b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									"pm.test(\"Body is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idOfCreatedEntity).to.eql('micimac1');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "92c7352c-fd1e-40f7-9662-b040b7342139",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"id\": \"micimac1\",\n\t\"text\": \"Melyik Micimackó két legkedvesebb étele?\",\n    \"explanationAfter\": \"Nem muszáj, hogy a két legkedevesebb különbözzön...\",\n    \"feedbackType\": \"trueFalseFeedback\",\n\t\"possibleAnswers\": [{\n\t\t\"textBefore\": \"Első legkedevesebb\",\n\t\t\"type\": \"dropdown\",\n\t\t\"possibleAnswerValues\": [{\n\t\t\t\"text\": \"kenyér\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"sör\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"méz\",\n\t\t\t\"isRightAnswer\": true\n\t\t}]\n\t}, {\n\t\t\"textBefore\": \"Második legkedevesebb\",\n\t\t\"type\": \"radioButtons\",\n\t\t\"possibleAnswerValues\": [{\n\t\t\t\"text\": \"kenyér\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"sör\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"méz\",\n\t\t\t\"isRightAnswer\": true\n\t\t}]\n\t}]\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create question Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3628a5-55dd-49dc-8d71-2c4597abfc9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b10c95ba-84a4-46bb-a4dd-33c3caa431be",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"micimac2\",\n\t\"text\": \"Melyek Micimackó legkedvesebb ételei?\",\n    \"feedbackType\": \"trueFalseFeedback\",\n\t\"possibleAnswers\": [{\n\t\t\"textBefore\": \"Melyik a legkedvesebb étele\",\n\t\t\"type\": \"dropdown\",\n\t\t\"possibleAnswerValues\": [{\n\t\t\t\"text\": \"kenyér\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"sör\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"méz\",\n\t\t\t\"isRightAnswer\": true\n\t\t}]\n\t}, {\n\t\t\"textBefore\": \"Melyiket szereti Micimackó? (Válaszd ki az ÖSSZES helyes választ!)\",\n\t\t\"type\": \"checkboxList\",\n\t\t\"possibleAnswerValues\": [{\n\t\t\t\"text\": \"kenyér\",\n\t\t\t\"isRightAnswer\": true\n\t\t}, {\n\t\t\t\"text\": \"sör\",\n\t\t\t\"isRightAnswer\": false\n\t\t}, {\n\t\t\t\"text\": \"méz\",\n\t\t\t\"isRightAnswer\": true\n\t\t},\n         {\n\t\t\t\"text\": \"tej\",\n\t\t\t\"isRightAnswer\": true\n\t\t}]\n\t}]\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create question Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1d9a76b-e5b6-40e9-88c5-701cfa0dcfda",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bba20d29-5f3f-4192-bd6c-b8eecef602b9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"sorrend1\",\n\t\"text\": \"Tedd sorrendbe az alábbi vers sorait\",\n    \"feedbackType\": \"trueFalseFeedback\",\n\t\"possibleAnswers\": [{\n\t\t\"type\": \"soruceCodeToOrder_EvalByCompare\",\n\t\t\"possibleAnswerValues\": [{\n\t\t\t\"text\": \"Egy napon, mikor Micimackónak semmi dolga nem akadt\",\n\t\t\t\"rightOrder\": 1\n\t\t}, {\n\t\t\t\"text\": \"eszébe jutott, hogy tenni kéne valami nagyon fontosat\",\n\t\t\t\"rightOrder\": 2\n\t\t}, {\n\t\t\t\"text\": \"Elment tehát Malackához, hogy meglesse, mit csinál\",\n\t\t\t\"rightOrder\": 3\n\t\t},\n        {\n\t\t\t\"text\": \"de Malackánál éppen akkor senkit nem talált\",\n\t\t\t\"rightOrder\": 4\n\t\t}]\n\t}]\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order code question",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45f4d7b6-4c1f-436e-8f69-d1d55ad0fb5e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6676cc03-c526-494c-a853-ebefbabc4867",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"sorrend2\",\n\t\"text\": \"Tedd sorrendbe a minimumkeresés algoritmusának sorait!\",\n\t\"feedbackType\": \"trueFalseFeedback\",\n\t\"possibleAnswers\": [{\n\t\t\"type\": \"soruceCodeToOrder_EvalByRun\",\n\t\t\"possibleAnswerValues\": [{\n\n\t\t\t\"text\": \"package org.progmatic.sourcequiz.classtotest;\",\n\t\t\t\"rightOrder\": 0\n\t\t}, {\n\n\t\t\t\"text\": \"\",\n\t\t\t\"rightOrder\": 1\n\t\t}, {\n\n\t\t\t\"text\": \"public class MinFinder {\",\n\t\t\t\"rightOrder\": 2\n\t\t}, {\n\n\t\t\t\"text\": \"\",\n\t\t\t\"rightOrder\": 3\n\t\t}, {\n\n\t\t\t\"text\": \"public MinFinder() {\",\n\t\t\t\"rightOrder\": 4\n\t\t}, {\n\n\t\t\t\"text\": \"    }\",\n\t\t\t\"rightOrder\": 5\n\t\t}, {\n\n\t\t\t\"text\": \"\",\n\t\t\t\"rightOrder\": 6\n\t\t}, {\n\n\t\t\t\"text\": \"public Integer findMin(int[] nums){\",\n\t\t\t\"rightOrder\": 7\n\t\t}, {\n\n\t\t\t\"text\": \"if(nums.length == 0){\",\n\t\t\t\"rightOrder\": 8\n\t\t}, {\n\n\t\t\t\"text\": \"return null;\",\n\t\t\t\"rightOrder\": 9\n\t\t}, {\n\n\t\t\t\"text\": \"}\",\n\t\t\t\"rightOrder\": 10\n\t\t}, {\n\n\t\t\t\"text\": \"int min = nums[0];\",\n\t\t\t\"rightOrder\": 11\n\t\t}, {\n\n\t\t\t\"text\": \"for (int i = 1; i < nums.length; i++) {\",\n\t\t\t\"rightOrder\": 12\n\t\t}, {\n\n\t\t\t\"text\": \"if(nums[i] < min){\",\n\t\t\t\"rightOrder\": 13\n\t\t}, {\n\n\t\t\t\"text\": \" min = nums[i];\",\n\t\t\t\"rightOrder\": 14\n\t\t}, {\n\n\t\t\t\"text\": \"}\",\n\t\t\t\"rightOrder\": 15\n\t\t}, {\n\n\t\t\t\"text\": \"}\",\n\t\t\t\"rightOrder\": 16\n\t\t}, {\n\n\t\t\t\"text\": \"return min;\",\n\t\t\t\"rightOrder\": 17\n\t\t}, {\n\n\t\t\t\"text\": \"}\",\n\t\t\t\"rightOrder\": 18\n\t\t}, {\n\n\t\t\t\"text\": \"\",\n\t\t\t\"rightOrder\": 19\n\t\t}, {\n\n\t\t\t\"text\": \"}\",\n\t\t\t\"rightOrder\": 20\n\t\t}],\n\t\t\"unitTestCode\": \"package org.progmatic.sourcequiz.test;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import org.progmatic.sourcequiz.classtotest.MinFinder;public class MinFinderUnitTest {        private MinFinder mf = new MinFinder();        @Test    void checkSolution() {        Assertions.assertEquals(Integer.valueOf(0), mf.findMin(new int[]{0, 1, 2, 3, 5}));        Assertions.assertEquals(Integer.valueOf(0), mf.findMin(new int[]{0, 1, 2, 3, 5}));        Assertions.assertEquals(Integer.valueOf(1), mf.findMin(new int[]{10, 9, 5, 3, 1}));        Assertions.assertEquals(Integer.valueOf(-100), mf.findMin(new int[]{0, -3, 5, 8, -100, 100, 2}));        Assertions.assertEquals(Integer.valueOf(1), mf.findMin(new int[]{1, 1, 1}));        Assertions.assertEquals(Integer.valueOf(0), mf.findMin(new int[]{0}));    }}\"\n\t}]\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create question Copy 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46fe5445-e6d9-4975-a48d-5ae3089e4b67",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6fa0f488-e2d2-4051-b102-3989fbbfa440",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"micimacko_es_a_mez\",\n\t\"text\": \"Szereti Micimackó a mézet?\",\n    \"feedbackType\": \"trueFalseFeedback\",\n\t\"possibleAnswers\": [{\n\t\t\"type\": \"trueFalseCheckbox\",\n\t\t\"possibleAnswerValues\": [{\n\t\t\t\"text\": \"Igen\",\n\t\t\t\"isRightAnswer\": true\n\t\t}]\n\t}]\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create class mk",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbf0a030-89f5-46c9-a634-8701bcb48ed8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"progmatic2020-ősz\",\n    \"year\": 2020,\n    \"semester\": \"autumn\",\n    \"isActive\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/class",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"class"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create student (Mézga Kriszta - mk)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4508eca1-3483-4528-8019-12fc22fcb520",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mézga Aladár\",\n    \"loginName\": \"mezgaaladar\",\n    \"emailAddress\": \"mezgaaladar@gmail.com\",\n    \"password\": \"mezgaaladar\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/student",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add student to class Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e89c015-d3e6-4446-84b1-a058a5070c96",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"idList\": [\n        \"mezgaaladar\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/class/progmatic2020-ősz/students",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"class",
								"progmatic2020-ősz",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create eternal quiz mk",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6441b360-038b-405a-9c5a-58f1f223018c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"Örökkvíz_1\",\n    \"questionIds\": [\n        \"micimac1\",\n        \"micimac2\",\n        \"micimacko_es_a_mez\",\n        \"sorrend1\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign class to Eternal Quiz Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3759584-b1fe-4566-8f4b-2383da0bb221",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"eternalQuizId\": \"Örökkvíz_1\",\n   \"schoolClassId\": \"progmatic2020-ősz\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/quiz/class",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"quiz",
								"class"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "sourceCodeEvalTest",
			"item": [
				{
					"name": "Get CSRF value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c7a84c5-3b72-41a9-9e63-644d644be214",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ca2d9d2-535b-4c5c-8865-a8e3ab84bd21",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3b0e2b2-7191-4d40-a74a-8b6d0d08aa43",
								"exec": [
									"let userName = pm.environment.get(\"adminusername\");",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.loginName).to.eql(userName);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{adminusername}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{adminuserpassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{progmappbe_host}}/login",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CSRF value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c7a84c5-3b72-41a9-9e63-644d644be214",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ca2d9d2-535b-4c5c-8865-a8e3ab84bd21",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order code question",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45f4d7b6-4c1f-436e-8f69-d1d55ad0fb5e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6676cc03-c526-494c-a853-ebefbabc4867",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"sorrend2\",\n\t\"text\": \"Tedd sorrendbe a minimumkeresés algoritmusának sorait!\",\n\t\"feedbackType\": \"trueFalseFeedback\",\n\t\"possibleAnswers\": [{\n\t\t\"type\": \"soruceCodeToOrder_EvalByRun\",\n\t\t\"possibleAnswerValues\": [{\n\n\t\t\t\"text\": \"package org.progmatic.sourcequiz.classtotest;\",\n\t\t\t\"rightOrder\": 0\n\t\t}, {\n\n\t\t\t\"text\": \"\",\n\t\t\t\"rightOrder\": 1\n\t\t}, {\n\n\t\t\t\"text\": \"public class MinFinder {\",\n\t\t\t\"rightOrder\": 2\n\t\t}, {\n\n\t\t\t\"text\": \"\",\n\t\t\t\"rightOrder\": 3\n\t\t}, {\n\n\t\t\t\"text\": \"public MinFinder() {\",\n\t\t\t\"rightOrder\": 4\n\t\t}, {\n\n\t\t\t\"text\": \"    }\",\n\t\t\t\"rightOrder\": 5\n\t\t}, {\n\n\t\t\t\"text\": \"\",\n\t\t\t\"rightOrder\": 6\n\t\t}, {\n\n\t\t\t\"text\": \"public Integer findMin(int[] nums){\",\n\t\t\t\"rightOrder\": 7\n\t\t}, {\n\n\t\t\t\"text\": \"if(nums.length == 0){\",\n\t\t\t\"rightOrder\": 8\n\t\t}, {\n\n\t\t\t\"text\": \"return null;\",\n\t\t\t\"rightOrder\": 9\n\t\t}, {\n\n\t\t\t\"text\": \"}\",\n\t\t\t\"rightOrder\": 10\n\t\t}, {\n\n\t\t\t\"text\": \"int min = nums[0];\",\n\t\t\t\"rightOrder\": 11\n\t\t}, {\n\n\t\t\t\"text\": \"for (int i = 1; i < nums.length; i++) {\",\n\t\t\t\"rightOrder\": 12\n\t\t}, {\n\n\t\t\t\"text\": \"if(nums[i] < min){\",\n\t\t\t\"rightOrder\": 13\n\t\t}, {\n\n\t\t\t\"text\": \" min = nums[i];\",\n\t\t\t\"rightOrder\": 14\n\t\t}, {\n\n\t\t\t\"text\": \"}\",\n\t\t\t\"rightOrder\": 15\n\t\t}, {\n\n\t\t\t\"text\": \"}\",\n\t\t\t\"rightOrder\": 16\n\t\t}, {\n\n\t\t\t\"text\": \"return min;\",\n\t\t\t\"rightOrder\": 17\n\t\t}, {\n\n\t\t\t\"text\": \"}\",\n\t\t\t\"rightOrder\": 18\n\t\t}, {\n\n\t\t\t\"text\": \"\",\n\t\t\t\"rightOrder\": 19\n\t\t}, {\n\n\t\t\t\"text\": \"}\",\n\t\t\t\"rightOrder\": 20\n\t\t}],\n\t\t\"unitTestCode\": \"package org.progmatic.sourcequiz.test;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import org.progmatic.sourcequiz.classtotest.MinFinder;public class MinFinderUnitTest {        private MinFinder mf = new MinFinder();        @Test    void checkSolution() {        Assertions.assertEquals(Integer.valueOf(0), mf.findMin(new int[]{0, 1, 2, 3, 5}));        Assertions.assertEquals(Integer.valueOf(0), mf.findMin(new int[]{0, 1, 2, 3, 5}));        Assertions.assertEquals(Integer.valueOf(1), mf.findMin(new int[]{10, 9, 5, 3, 1}));        Assertions.assertEquals(Integer.valueOf(-100), mf.findMin(new int[]{0, -3, 5, 8, -100, 100, 2}));        Assertions.assertEquals(Integer.valueOf(1), mf.findMin(new int[]{1, 1, 1}));        Assertions.assertEquals(Integer.valueOf(0), mf.findMin(new int[]{0}));    }}\"\n\t}]\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create class mk",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbf0a030-89f5-46c9-a634-8701bcb48ed8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"mk\",\n    \"year\": 2020,\n    \"semester\": \"autumn\",\n    \"isActive\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/class",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"class"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create student (Mézga Kriszta - mk)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4508eca1-3483-4528-8019-12fc22fcb520",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mézga Kriszta\",\n    \"loginName\": \"mk\",\n    \"emailAddress\": \"mezgaaladar@gmail.com\",\n    \"password\": \"mk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/student",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add student to class Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e89c015-d3e6-4446-84b1-a058a5070c96",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"idList\": [\n        \"mk\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/class/mk/students",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"class",
								"mk",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create eternal quiz mk",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6441b360-038b-405a-9c5a-58f1f223018c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"mk\",\n    \"questionIds\": [\n        \"sorrend2\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign class to Eternal Quiz Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3759584-b1fe-4566-8f4b-2383da0bb221",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"eternalQuizId\": \"mk\",\n   \"schoolClassId\": \"mk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/quiz/class",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"quiz",
								"class"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "sourceCodeEvalTestSimpleEndpoint",
			"item": [
				{
					"name": "Get CSRF value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68de98c4-b3be-468f-85f7-ecc2b865bfac",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f7e66f30-d7e2-4eab-80ba-e7bf5a11523c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e9531fc-ceae-4d15-ba8a-a111d496d3bb",
								"exec": [
									"let userName = pm.environment.get(\"adminusername\");",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.loginName).to.eql(userName);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{adminusername}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{adminuserpassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{progmappbe_host}}/login",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CSRF value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f4fa5a47-f8eb-4ee8-8dbe-580363b94d51",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8805c14f-20a4-4516-a5a9-e34186de414d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order code question",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6839b62a-c4ec-4970-864d-93b1e482d19a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f8cf4e7a-5ed6-411b-aa0b-3c0e032ebb68",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"sorrendlinker\",\n    \"text\": \"Tedd sorrendbe a lineáris keresés algoritmusának sorait!\",\n    \"feedbackType\": \"trueFalseFeedback\",\n    \"code\": \"package org.progmatic.sourcequiz.classtotest;\\n\\npublic class LinearFinder {\\n    public int firstIndexOfVal(int[] array, int value){\\n        for (int i = 0; i < array.length; i++) {\\n            if(value == array[i]){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n\",\n    \"unitTest\": \"package org.progmatic.sourcequiz.test;\\n\\nimport org.junit.jupiter.api.Test;\\nimport org.progmatic.sourcequiz.classtotest.LinearFinder;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\n\\npublic class LinearFinderUnitTest {\\n\\n    LinearFinder lf = new LinearFinder();\\n\\n    @Test\\n    void checkSolution() {\\n        assertEquals(0, lf.firstIndexOfVal(new int[]{3, 5, 3, 1, 0, -2}, 3));\\n        assertEquals(4, lf.firstIndexOfVal(new int[]{3, 5, 3, 1, 0, -2}, 0));\\n        assertEquals(-1, lf.firstIndexOfVal(new int[]{3, 5, 3, 1, 0, -2}, 30));\\n        assertEquals(2, lf.firstIndexOfVal(new int[]{2, 5, 3, 1, 0, -2}, 3));\\n        assertEquals(-1, lf.firstIndexOfVal(new int[]{}, 3));\\n        assertEquals(1, lf.firstIndexOfVal(new int[]{2, 5, 5, 5, 0, -2}, 5));\\n    }\\n}\\n\"\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/orderlinesquestion",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"orderlinesquestion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order code question Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59ca9a36-4df3-4800-90f5-a70087402ea6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c811403-fd10-420b-86c7-77827e1ecab3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"sorrendminker\",\n    \"text\": \"Tedd sorrendbe a minimumkeresés algoritmusának sorait!\",\n    \"feedbackType\": \"trueFalseFeedback\",\n    \"code\": \"package org.progmatic.sourcequiz.classtotest;\\npublic class MinFinder {\\n    public Integer findMin(int[] nums){\\n        if(nums.length == 0){\\n            return null;\\n        }\\n        int min = nums[0];\\n        for (int i = 1; i < nums.length; i++) {\\n            if(nums[i] < min){\\n                min = nums[i];\\n            }\\n        }\\n        return min;\\n    }\\n}\",\n    \"unitTest\": \"package org.progmatic.sourcequiz.test;\\n\\nimport org.junit.jupiter.api.Assertions;\\nimport org.junit.jupiter.api.Test;\\nimport org.progmatic.sourcequiz.classtotest.MinFinder;\\n\\npublic class MinFinderUnitTest {\\n\\n    private MinFinder mf = new MinFinder();\\n    \\n    @Test\\n    void checkSolution() {\\n        Assertions.assertEquals(0, mf.findMin(new int[]{0, 1, 2, 3, 5}));\\n        Assertions.assertEquals(0, mf.findMin(new int[]{0, 1, 2, 3, 5}));\\n        Assertions.assertEquals(1, mf.findMin(new int[]{10, 9, 5, 3, 1}));\\n        Assertions.assertEquals(-100, mf.findMin(new int[]{0, -3, 5, 8, -100, 100, 2}));\\n        Assertions.assertEquals(1, mf.findMin(new int[]{1, 1, 1}));\\n        Assertions.assertEquals(0, mf.findMin(new int[]{0}));\\n    }\\n\\n}\\n\"\n}"
						},
						"url": {
							"raw": "{{progmappbe_host}}/orderlinesquestion",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"orderlinesquestion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create class mk",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d0060d4-b50d-4ba5-af79-c5fe58291cb5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"mk\",\n    \"year\": 2020,\n    \"semester\": \"autumn\",\n    \"isActive\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/class",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"class"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create student (Mézga Kriszta - mk)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5889ed5-ad7c-4400-bd3f-e2139467ca69",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mézga Kriszta\",\n    \"loginName\": \"mk\",\n    \"emailAddress\": \"mezgaaladar@gmail.com\",\n    \"password\": \"mk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/student",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add student to class Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3bf523e-7c3a-44ed-9250-299a60593af6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"idList\": [\n        \"mk\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/class/mk/students",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"class",
								"mk",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create eternal quiz mk",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40296fee-441c-42be-bb28-fd648ab58fa5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"mk\",\n    \"questionIds\": [\n        \"sorrendlinker\",\n        \"sorrendminker\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign class to Eternal Quiz Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb739327-1ab3-48dc-ac79-99a0e3177335",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"successFullResult == true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.successFullResult).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"type": "text",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"eternalQuizId\": \"mk\",\n   \"schoolClassId\": \"mk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/quiz/class",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"quiz",
								"class"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "solveEvalTest",
			"item": [
				{
					"name": "Login as mk",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddf6ef60-2a0e-422f-98f0-d72581cf1f3a",
								"exec": [
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.loginName).to.eql(\"mezgaaladar\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "mk",
									"type": "text"
								},
								{
									"key": "password",
									"value": "mk",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{progmappbe_host}}/login",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CSRF value after login Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87476440-b7c2-4349-99dd-3490e5cf3f2b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ad79c695-a113-45b3-9d65-34210be3ee43",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set(\"csrf_token\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/csrf",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"csrf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get next eternal quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95c64ebf-39e7-4436-b1fb-5fafba35cf23",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"id is not null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).not.equal(null);",
									"});",
									"",
									"pm.test(\"possibleAnswers is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.possibleAnswers.length).to.be.above(0);",
									"});",
									"",
									"pm.variables.set(\"questionToAnswer\", JSON.stringify(pm.response.json()));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/question",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "quizanswer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b6b70c7-3e03-4286-8997-ff0f975821da",
								"exec": [
									"//let question = JSON.parse(pm.variables.get('questionToAnswer')).id;",
									"//pm.variables.set(\"questionId\",question.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b4f3b3c-3328-4254-a46f-ceab98d69d2c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"questionId\": \"sorrend2\",\n    \"answers\": [\n        {\n            \"id\": \"fb2a234b-b953-42a9-a484-dd27cd5d694b\",\n            \"selectedAnswerIds\": [\n                \"d9e37e56-31f8-4690-91cd-7c891d80c5a0\",\n                \"a9f383a1-71b8-4980-8109-d15267a0216a\",\n                \"1b30449d-b289-4063-a389-517d36d23e9b\",\n                \"ff5ef76c-b438-4022-9f63-380dcf2ee766\",\n                \"aca06a1e-d1a4-4afb-baa8-a28ca8efbd79\",\n                \"a8a6fd77-a2f4-4715-85c0-ed5ace8c9c0f\",\n                \"4eab1900-d0fa-4b70-979f-c12cdefaa2ad\",\n                \"897935a3-0386-4f3f-952d-d8aab2707afa\",\n                \"7b858fbf-651c-4a99-acbd-0e242ae8cd98\",\n                \"ee6f9115-3903-47d2-9be3-0f7dee14a7a2\",\n                \"b353f7bc-052b-4cd1-8151-9c64c9c2399c\",\n                \"72d82bec-3571-43ca-98bb-4bc5d6cf99e8\",\n                \"c75094af-4e47-4226-8809-0b9fbb2ae5c6\",\n                \"ab29fb6c-2e48-4ed8-bd47-86d6af92022c\",\n                \"3f1afa5c-c0bd-4b4d-90b6-b1f51eb7198b\",\n                \"8f8f5083-7ce4-4421-906c-41ab60b49300\",\n                \"657d8a54-30ed-4108-acfd-e4604d0ef905\",\n                \"6b6b8925-5d5a-40ae-833e-6b7f58b4fa5d\",\n                \"de78bc2d-3fe3-453d-94c7-3cdeb180c239\",\n                \"d249d81b-2e71-48ca-bf8f-2369a49795b0\",\n                \"1dac83b3-9666-426a-847b-ac2f8ac6d660\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/answer",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"answer"
							]
						}
					},
					"response": []
				},
				{
					"name": "quizanswer on Heroku",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1e434a89-60ac-4297-988d-119d18d33bae",
								"exec": [
									"//let question = JSON.parse(pm.variables.get('questionToAnswer')).id;",
									"//pm.variables.set(\"questionId\",question.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5337bde8-1528-4f8a-8003-56df9513e229",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"questionId\": \"sorrend2\",\n    \"answers\": [\n        {\n            \"id\": \"e17e4b48-5add-42ee-b6c6-03ee00ec2a2f\",\n            \"selectedAnswerIds\": [\n                \"3ca5bdee-67c1-42dc-b035-d63cbefd129d\",\n                \"5fe16bc3-2ed4-463e-8741-f95091108990\",\n                \"ac4be9af-b1f9-4585-9078-e5066be4165b\",\n                \"33afc40e-2b1c-46ec-9f8e-55eda8242d7c\",\n                \"3440cacf-f0f3-4dff-9a52-1c6d30fd3371\",\n                \"f991e0d6-05d7-432f-8138-d5abff4bcd9a\",\n                \"b00b74d4-055f-4cbf-8870-dfd2b9262d3a\",\n                \"6311b341-b080-4b94-b1eb-a190896af40b\",\n                \"d8680b75-4972-40e1-96e2-c9b2c9062e74\",\n                \"d15f74c7-051e-47e7-af0d-c2aa071e88aa\",\n                \"2cb35d09-39f7-4af4-9990-80e0e242ad75\",\n                \"8474f2fc-f347-4123-8410-9a8d328f9116\",\n                \"fd040e43-10da-4bdc-a683-23ea0d908c8b\",\n                \"5295a82c-eead-427c-82bf-b1db0d2ed3f0\",\n                \"f7b72a3b-f07d-4ca8-8029-bbaeb60a1f4c\",\n                \"ae7bc32c-062b-4d04-bd1e-3700f75a6767\",\n                \"941dfc44-c85d-4dd0-ba73-51e46932efce\",\n                \"b8b7043c-a974-4c4e-8416-dd05d4cd820c\",\n                \"a8ecd31b-3941-4317-a213-e900978a8356\",\n                \"dc19e70e-b535-447e-8b68-cd4f33967ac6\",\n                \"048b105b-8da1-4910-8b68-f0b81c327336\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{progmappbe_host}}/eternalquiz/answer",
							"host": [
								"{{progmappbe_host}}"
							],
							"path": [
								"eternalquiz",
								"answer"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	]
}